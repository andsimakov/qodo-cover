import argparse
import os

from typing import Any

from dynaconf import Dynaconf

from cover_agent.CoverAgent import CoverAgent
from cover_agent.settings.config_loader import get_settings
from cover_agent.settings.config_schema import CoverAgentConfig
from cover_agent.version import __version__


def parse_args(settings: Dynaconf) -> argparse.Namespace:
    """
    Parse command line arguments.
    """
    settings_branch = "default"

    parser = argparse.ArgumentParser(description=f"Cover Agent v{__version__}")

    arg_definitions = [
        ("--source-file-path", dict(type=str, required=True, help="Path to the source file.")),
        ("--test-file-path", dict(type=str, required=True, help="Path to the input test file.")),
        ("--project-root", dict(type=str, default="", help="Path to the root of the project.")),
        ("--test-file-output-path", dict(type=str, default="", help="Path to the output test file.",)),
        ("--code-coverage-report-path", dict(type=str, required=True, help="Path to the code coverage report file.")),
        ("--test-command", dict(
            type=str, required=True, help="The command to run tests and generate coverage report."
        )),
        ("--test-command-dir", dict(
            type=str, default=os.getcwd(), help="The directory to run the test command in. Default: %(default)s."
        )),
        ("--included-files", dict(
            type=list,
            default=settings.get(f"{settings_branch}.included_files"),
            nargs="*",
            help=(
                'List of files to include in the coverage. For example, "--included-files library1.c library2.c." '
                'Default: %(default)s.'
            ),
        )),
        ("--coverage-type", dict(
            type=str,
            default=settings.get(f"{settings_branch}.coverage_type"),
            help="Type of coverage report. Default: %(default)s.",
        )),
        ("--report-filepath", dict(
            type=str,
            default=settings.get(f"{settings_branch}.report_filepath"),
            help="Path to the output report file. Default: %(default)s.",
        )),
        ("--desired-coverage", dict(
            type=int,
            default=settings.get(f"{settings_branch}.desired_coverage"),
            help="The desired coverage percentage. Default: %(default)s.",
        )),
        ("--max-iterations", dict(
            type=int,
            default=settings.get(f"{settings_branch}.max_iterations"),
            help="The maximum number of iterations. Default: %(default)s.",
        )),
        ("--max-run-time", dict(
            type=int,
            default=settings.get(f"{settings_branch}.max_run_time_sec"),
            help=(
                "Maximum time (in seconds) allowed for test execution. Overrides the value in configuration.toml "
                "if provided. Default: %(default)s."
            ),
        )),
        ("--additional-instructions", dict(
            type=str,
            default="",
            help="Any additional instructions you wish to append at the end of the prompt. Default: %(default)s.",
        )),
        ("--model", dict(
            type=str,
            default=settings.get(f"{settings_branch}.model"),
            help="Which LLM model to use. Default: %(default)s.",
        )),
        ("--api-base", dict(
            type=str,
            default=settings.get(f"{settings_branch}.api_base"),
            help="The API url to use for Ollama or Hugging Face. Default: %(default)s.",
        )),
        ("--strict-coverage", dict(
            action="store_true",
            help="If set, Cover-Agent will return a non-zero exit code if the desired code coverage is not achieved."
        )),
        ("--run-tests-multiple-times", dict(
            type=int,
            default=settings.get(f"{settings_branch}.run_tests_multiple_times"),
            help="Number of times to run the tests generated by Cover Agent. Default: %(default)s.",
        )),
        ("--log-db-path", dict(
            type=str,
            default=settings.get(f"{settings_branch}.log_db_path"),
            help="Path to optional log database. Default: %(default)s.",
        )),
        ("--branch", dict(
            type=str,
            default=settings.get(f"{settings_branch}.branch"),
            help="The branch to compare against when using --diff-coverage. Default: %(default)s.",
        )),
        # TODO: Check if `store_true` is correct for this argument
        ("--run-each-test-separately", dict(
            type=bool,
            default=settings.get(f"{settings_branch}.run_each_test_separately. Default: %(default)s."),
            help="Run each test separately.",
        )),
    ]

    for name, kwargs in arg_definitions:
        parser.add_argument(name, **kwargs)
    parser.add_argument(
        "--suppress-log-files",
        action="store_true",
        default=False,
        help="Suppress all generated log files (HTML, logs, DB files).",
    )

    # Create mutually exclusive group
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--use-report-coverage-feature-flag",
        action="store_true",
        help=(
            "Setting this to True considers the coverage of all the files in the coverage report. This means "
            "we consider a test as good if it increases coverage for a different file other than the source file. "
            "Default: False. Not compatible with --diff-coverage."
        ),
    )
    group.add_argument(
        "--diff-coverage",
        default=settings.get(f"{settings_branch}.diff_coverage. Default: %(default)s."),
        action="store_true",
        help=(
            "If set, Cover-Agent will only generate tests based on the diff between branches. Default: False. "
            "Not compatible with --use-report-coverage-feature-flag."
        ),
    )
    parser.add_argument(
        "--record-mode",
        action="store_true",
        help="Enable record mode for LLM responses. Default: False.",
    )

    return parser.parse_args()


def merge_settings(args: argparse.Namespace, settings: Dynaconf) -> dict[str, Any]:

    settings_branch = "default"
    # CLI overrides TOML settings
    # TODO: Remove TOML options because CLI already has defaults from TOML. The function potentially is not required
    return {
        "source_file_path": args.source_file_path,
        "test_file_path": args.test_file_path,
        "project_root": args.project_root,
        "test_file_output_path": args.test_file_output_path,
        "code_coverage_report_path": args.code_coverage_report_path,
        "test_command": args.test_command,
        "test_command_dir": args.test_command_dir,
        "included_files": args.included_files,
        "coverage_type": args.coverage_type or settings.get(f"{settings_branch}.coverage_type"),
        "report_filepath": args.report_filepath or settings.get(f"{settings_branch}.report_filepath"),
        "desired_coverage": args.desired_coverage or settings.get(f"{settings_branch}.desired_coverage"),
        "max_iterations": args.max_iterations or settings.get(f"{settings_branch}.max_iterations"),
        "max_run_time_sec": args.max_run_time or settings.get(f"{settings_branch}.max_run_time_sec"),
        "additional_instructions": args.additional_instructions,
        "model": args.model or settings.get(f"{settings_branch}.model"),
        "api_base": args.api_base or settings.get(f"{settings_branch}.api_base"),
        "strict_coverage": args.strict_coverage,
        "run_tests_multiple_times": args.run_tests_multiple_times or settings.get(
            f"{settings_branch}.run_tests_multiple_times"
        ),
        "log_db_path": args.log_db_path or settings.get(f"{settings_branch}.log_db_path"),
        "branch": args.branch or settings.get(f"{settings_branch}.branch"),
        "use_report_coverage_feature_flag": args.use_report_coverage_feature_flag,
        "diff_coverage": args.diff_coverage or settings.get(f"{settings_branch}.diff_coverage"),
        "run_each_test_separately": args.run_each_test_separately or settings.get(
            f"{settings_branch}.run_each_test_separately"
        ),
    }


def main():
    settings = get_settings()
    args = parse_args(settings)
    merged_config = merge_settings(args, settings)
    final_config = CoverAgentConfig(**merged_config)
    agent = CoverAgent(final_config)
    agent.run()


if __name__ == "__main__":
    main()
